# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _FEmTool.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_FEmTool', [dirname(__file__)])
        except ImportError:
            import _FEmTool
            return _FEmTool
        if fp is not None:
            try:
                _mod = imp.load_module('_FEmTool', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _FEmTool = swig_import_helper()
    del swig_import_helper
else:
    import _FEmTool
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _FEmTool.delete_SwigPyIterator
    def __iter__(self): return self
SwigPyIterator.value = new_instancemethod(_FEmTool.SwigPyIterator_value,None,SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_FEmTool.SwigPyIterator_incr,None,SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_FEmTool.SwigPyIterator_decr,None,SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_FEmTool.SwigPyIterator_distance,None,SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_FEmTool.SwigPyIterator_equal,None,SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_FEmTool.SwigPyIterator_copy,None,SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_FEmTool.SwigPyIterator_next,None,SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_FEmTool.SwigPyIterator___next__,None,SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_FEmTool.SwigPyIterator_previous,None,SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_FEmTool.SwigPyIterator_advance,None,SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_FEmTool.SwigPyIterator___eq__,None,SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_FEmTool.SwigPyIterator___ne__,None,SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_FEmTool.SwigPyIterator___iadd__,None,SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_FEmTool.SwigPyIterator___isub__,None,SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_FEmTool.SwigPyIterator___add__,None,SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_FEmTool.SwigPyIterator___sub__,None,SwigPyIterator)
SwigPyIterator_swigregister = _FEmTool.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.TColStd
import OCC.Standard
import OCC.TCollection
import OCC.MMgt
import OCC.math
import OCC.PLib
import OCC.TColgp
import OCC.gp
import OCC.GeomAbs
class FEmTool_Assembly(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param Dependence:
        :type Dependence: TColStd_Array2OfInteger &
        :param Table:
        :type Table: Handle_FEmTool_HAssemblyTable &
        :rtype: None

        """
        _FEmTool.FEmTool_Assembly_swiginit(self,_FEmTool.new_FEmTool_Assembly(*args))
    def NullifyMatrix(self):
        """
        * Nullify all Matrix 's Coefficient

        :rtype: None

        """
        return _FEmTool.FEmTool_Assembly_NullifyMatrix(self)

    def AddMatrix(self, *args):
        """
        * Add an elementary Matrix in the assembly Matrix if Dependence(Dimension1,Dimension2) is False

        :param Element:
        :type Element: Standard_Integer
        :param Dimension1:
        :type Dimension1: Standard_Integer
        :param Dimension2:
        :type Dimension2: Standard_Integer
        :param Mat:
        :type Mat: math_Matrix &
        :rtype: None

        """
        return _FEmTool.FEmTool_Assembly_AddMatrix(self, *args)

    def NullifyVector(self):
        """
        * Nullify all Coordinate of assembly Vector (second member)

        :rtype: None

        """
        return _FEmTool.FEmTool_Assembly_NullifyVector(self)

    def AddVector(self, *args):
        """
        * Add an elementary Vector in the assembly Vector (second member)

        :param Element:
        :type Element: Standard_Integer
        :param Dimension:
        :type Dimension: Standard_Integer
        :param Vec:
        :type Vec: math_Vector &
        :rtype: None

        """
        return _FEmTool.FEmTool_Assembly_AddVector(self, *args)

    def ResetConstraint(self):
        """
        * Delete all Constraints.

        :rtype: None

        """
        return _FEmTool.FEmTool_Assembly_ResetConstraint(self)

    def NullifyConstraint(self):
        """
        * Nullify all Constraints.

        :rtype: None

        """
        return _FEmTool.FEmTool_Assembly_NullifyConstraint(self)

    def AddConstraint(self, *args):
        """
        :param IndexofConstraint:
        :type IndexofConstraint: Standard_Integer
        :param Element:
        :type Element: Standard_Integer
        :param Dimension:
        :type Dimension: Standard_Integer
        :param LinearForm:
        :type LinearForm: math_Vector &
        :param Value:
        :type Value: float
        :rtype: None

        """
        return _FEmTool.FEmTool_Assembly_AddConstraint(self, *args)

    def Solve(self):
        """
        * Solve the assembly system Returns Standard_False if the computation failed.

        :rtype: bool

        """
        return _FEmTool.FEmTool_Assembly_Solve(self)

    def Solution(self, *args):
        """
        :param Solution:
        :type Solution: math_Vector &
        :rtype: None

        """
        return _FEmTool.FEmTool_Assembly_Solution(self, *args)

    def NbGlobVar(self):
        """
        :rtype: int

        """
        return _FEmTool.FEmTool_Assembly_NbGlobVar(self)

    def GetAssemblyTable(self, *args):
        """
        :param AssTable:
        :type AssTable: Handle_FEmTool_HAssemblyTable &
        :rtype: None

        """
        return _FEmTool.FEmTool_Assembly_GetAssemblyTable(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


FEmTool_Assembly.NullifyMatrix = new_instancemethod(_FEmTool.FEmTool_Assembly_NullifyMatrix,None,FEmTool_Assembly)
FEmTool_Assembly.AddMatrix = new_instancemethod(_FEmTool.FEmTool_Assembly_AddMatrix,None,FEmTool_Assembly)
FEmTool_Assembly.NullifyVector = new_instancemethod(_FEmTool.FEmTool_Assembly_NullifyVector,None,FEmTool_Assembly)
FEmTool_Assembly.AddVector = new_instancemethod(_FEmTool.FEmTool_Assembly_AddVector,None,FEmTool_Assembly)
FEmTool_Assembly.ResetConstraint = new_instancemethod(_FEmTool.FEmTool_Assembly_ResetConstraint,None,FEmTool_Assembly)
FEmTool_Assembly.NullifyConstraint = new_instancemethod(_FEmTool.FEmTool_Assembly_NullifyConstraint,None,FEmTool_Assembly)
FEmTool_Assembly.AddConstraint = new_instancemethod(_FEmTool.FEmTool_Assembly_AddConstraint,None,FEmTool_Assembly)
FEmTool_Assembly.Solve = new_instancemethod(_FEmTool.FEmTool_Assembly_Solve,None,FEmTool_Assembly)
FEmTool_Assembly.Solution = new_instancemethod(_FEmTool.FEmTool_Assembly_Solution,None,FEmTool_Assembly)
FEmTool_Assembly.NbGlobVar = new_instancemethod(_FEmTool.FEmTool_Assembly_NbGlobVar,None,FEmTool_Assembly)
FEmTool_Assembly.GetAssemblyTable = new_instancemethod(_FEmTool.FEmTool_Assembly_GetAssemblyTable,None,FEmTool_Assembly)
FEmTool_Assembly._kill_pointed = new_instancemethod(_FEmTool.FEmTool_Assembly__kill_pointed,None,FEmTool_Assembly)
FEmTool_Assembly_swigregister = _FEmTool.FEmTool_Assembly_swigregister
FEmTool_Assembly_swigregister(FEmTool_Assembly)

class FEmTool_AssemblyTable(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param R1:
        :type R1: Standard_Integer
        :param R2:
        :type R2: Standard_Integer
        :param C1:
        :type C1: Standard_Integer
        :param C2:
        :type C2: Standard_Integer
        :rtype: None

        :param Item:
        :type Item: Handle_TColStd_HArray1OfInteger &
        :param R1:
        :type R1: Standard_Integer
        :param R2:
        :type R2: Standard_Integer
        :param C1:
        :type C1: Standard_Integer
        :param C2:
        :type C2: Standard_Integer
        :rtype: None

        """
        _FEmTool.FEmTool_AssemblyTable_swiginit(self,_FEmTool.new_FEmTool_AssemblyTable(*args))
    def Init(self, *args):
        """
        :param V:
        :type V: Handle_TColStd_HArray1OfInteger &
        :rtype: None

        """
        return _FEmTool.FEmTool_AssemblyTable_Init(self, *args)

    def Destroy(self):
        """
        :rtype: None

        """
        return _FEmTool.FEmTool_AssemblyTable_Destroy(self)

    def Assign(self, *args):
        """
        :param Other:
        :type Other: FEmTool_AssemblyTable &
        :rtype: FEmTool_AssemblyTable

        """
        return _FEmTool.FEmTool_AssemblyTable_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: FEmTool_AssemblyTable &
        :rtype: FEmTool_AssemblyTable

        """
        return _FEmTool.FEmTool_AssemblyTable_Set(self, *args)

    def ColLength(self):
        """
        :rtype: int

        """
        return _FEmTool.FEmTool_AssemblyTable_ColLength(self)

    def RowLength(self):
        """
        :rtype: int

        """
        return _FEmTool.FEmTool_AssemblyTable_RowLength(self)

    def LowerCol(self):
        """
        :rtype: int

        """
        return _FEmTool.FEmTool_AssemblyTable_LowerCol(self)

    def LowerRow(self):
        """
        :rtype: int

        """
        return _FEmTool.FEmTool_AssemblyTable_LowerRow(self)

    def UpperCol(self):
        """
        :rtype: int

        """
        return _FEmTool.FEmTool_AssemblyTable_UpperCol(self)

    def UpperRow(self):
        """
        :rtype: int

        """
        return _FEmTool.FEmTool_AssemblyTable_UpperRow(self)

    def SetValue(self, *args):
        """
        :param Row:
        :type Row: Standard_Integer
        :param Col:
        :type Col: Standard_Integer
        :param Value:
        :type Value: Handle_TColStd_HArray1OfInteger &
        :rtype: None

        """
        return _FEmTool.FEmTool_AssemblyTable_SetValue(self, *args)

    def Value(self, *args):
        """
        :param Row:
        :type Row: Standard_Integer
        :param Col:
        :type Col: Standard_Integer
        :rtype: Handle_TColStd_HArray1OfInteger

        """
        return _FEmTool.FEmTool_AssemblyTable_Value(self, *args)

    def ChangeValue(self, *args):
        """
        :param Row:
        :type Row: Standard_Integer
        :param Col:
        :type Col: Standard_Integer
        :rtype: Handle_TColStd_HArray1OfInteger

        """
        return _FEmTool.FEmTool_AssemblyTable_ChangeValue(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


FEmTool_AssemblyTable.Init = new_instancemethod(_FEmTool.FEmTool_AssemblyTable_Init,None,FEmTool_AssemblyTable)
FEmTool_AssemblyTable.Destroy = new_instancemethod(_FEmTool.FEmTool_AssemblyTable_Destroy,None,FEmTool_AssemblyTable)
FEmTool_AssemblyTable.Assign = new_instancemethod(_FEmTool.FEmTool_AssemblyTable_Assign,None,FEmTool_AssemblyTable)
FEmTool_AssemblyTable.Set = new_instancemethod(_FEmTool.FEmTool_AssemblyTable_Set,None,FEmTool_AssemblyTable)
FEmTool_AssemblyTable.ColLength = new_instancemethod(_FEmTool.FEmTool_AssemblyTable_ColLength,None,FEmTool_AssemblyTable)
FEmTool_AssemblyTable.RowLength = new_instancemethod(_FEmTool.FEmTool_AssemblyTable_RowLength,None,FEmTool_AssemblyTable)
FEmTool_AssemblyTable.LowerCol = new_instancemethod(_FEmTool.FEmTool_AssemblyTable_LowerCol,None,FEmTool_AssemblyTable)
FEmTool_AssemblyTable.LowerRow = new_instancemethod(_FEmTool.FEmTool_AssemblyTable_LowerRow,None,FEmTool_AssemblyTable)
FEmTool_AssemblyTable.UpperCol = new_instancemethod(_FEmTool.FEmTool_AssemblyTable_UpperCol,None,FEmTool_AssemblyTable)
FEmTool_AssemblyTable.UpperRow = new_instancemethod(_FEmTool.FEmTool_AssemblyTable_UpperRow,None,FEmTool_AssemblyTable)
FEmTool_AssemblyTable.SetValue = new_instancemethod(_FEmTool.FEmTool_AssemblyTable_SetValue,None,FEmTool_AssemblyTable)
FEmTool_AssemblyTable.Value = new_instancemethod(_FEmTool.FEmTool_AssemblyTable_Value,None,FEmTool_AssemblyTable)
FEmTool_AssemblyTable.ChangeValue = new_instancemethod(_FEmTool.FEmTool_AssemblyTable_ChangeValue,None,FEmTool_AssemblyTable)
FEmTool_AssemblyTable._kill_pointed = new_instancemethod(_FEmTool.FEmTool_AssemblyTable__kill_pointed,None,FEmTool_AssemblyTable)
FEmTool_AssemblyTable_swigregister = _FEmTool.FEmTool_AssemblyTable_swigregister
FEmTool_AssemblyTable_swigregister(FEmTool_AssemblyTable)

class FEmTool_Curve(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param Dimension:
        :type Dimension: Standard_Integer
        :param NbElements:
        :type NbElements: Standard_Integer
        :param TheBase:
        :type TheBase: Handle_PLib_Base &
        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        """
        _FEmTool.FEmTool_Curve_swiginit(self,_FEmTool.new_FEmTool_Curve(*args))
    def Knots(self):
        """
        :rtype: TColStd_Array1OfReal

        """
        return _FEmTool.FEmTool_Curve_Knots(self)

    def SetElement(self, *args):
        """
        :param IndexOfElement:
        :type IndexOfElement: Standard_Integer
        :param Coeffs:
        :type Coeffs: TColStd_Array2OfReal &
        :rtype: None

        """
        return _FEmTool.FEmTool_Curve_SetElement(self, *args)

    def D0(self, *args):
        """
        :param U:
        :type U: float
        :param Pnt:
        :type Pnt: TColStd_Array1OfReal &
        :rtype: None

        """
        return _FEmTool.FEmTool_Curve_D0(self, *args)

    def D1(self, *args):
        """
        :param U:
        :type U: float
        :param Vec:
        :type Vec: TColStd_Array1OfReal &
        :rtype: None

        """
        return _FEmTool.FEmTool_Curve_D1(self, *args)

    def D2(self, *args):
        """
        :param U:
        :type U: float
        :param Vec:
        :type Vec: TColStd_Array1OfReal &
        :rtype: None

        """
        return _FEmTool.FEmTool_Curve_D2(self, *args)

    def Length(self, *args):
        """
        :param FirstU:
        :type FirstU: float
        :param LastU:
        :type LastU: float
        :param Length:
        :type Length: float &
        :rtype: None

        """
        return _FEmTool.FEmTool_Curve_Length(self, *args)

    def GetElement(self, *args):
        """
        :param IndexOfElement:
        :type IndexOfElement: Standard_Integer
        :param Coeffs:
        :type Coeffs: TColStd_Array2OfReal &
        :rtype: None

        """
        return _FEmTool.FEmTool_Curve_GetElement(self, *args)

    def GetPolynom(self, *args):
        """
        * returns coefficients of all elements in canonical base.

        :param Coeffs:
        :type Coeffs: TColStd_Array1OfReal &
        :rtype: None

        """
        return _FEmTool.FEmTool_Curve_GetPolynom(self, *args)

    def NbElements(self):
        """
        :rtype: int

        """
        return _FEmTool.FEmTool_Curve_NbElements(self)

    def Dimension(self):
        """
        :rtype: int

        """
        return _FEmTool.FEmTool_Curve_Dimension(self)

    def Base(self):
        """
        :rtype: Handle_PLib_Base

        """
        return _FEmTool.FEmTool_Curve_Base(self)

    def Degree(self, *args):
        """
        :param IndexOfElement:
        :type IndexOfElement: Standard_Integer
        :rtype: int

        """
        return _FEmTool.FEmTool_Curve_Degree(self, *args)

    def SetDegree(self, *args):
        """
        :param IndexOfElement:
        :type IndexOfElement: Standard_Integer
        :param Degree:
        :type Degree: Standard_Integer
        :rtype: None

        """
        return _FEmTool.FEmTool_Curve_SetDegree(self, *args)

    def ReduceDegree(self, *args):
        """
        :param IndexOfElement:
        :type IndexOfElement: Standard_Integer
        :param Tol:
        :type Tol: float
        :param NewDegree:
        :type NewDegree: Standard_Integer &
        :param MaxError:
        :type MaxError: float &
        :rtype: None

        """
        return _FEmTool.FEmTool_Curve_ReduceDegree(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(FEmTool_Curve self)"""
        return _FEmTool.FEmTool_Curve__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(FEmTool_Curve self) -> Handle_FEmTool_Curve"""
        return _FEmTool.FEmTool_Curve_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


FEmTool_Curve.Knots = new_instancemethod(_FEmTool.FEmTool_Curve_Knots,None,FEmTool_Curve)
FEmTool_Curve.SetElement = new_instancemethod(_FEmTool.FEmTool_Curve_SetElement,None,FEmTool_Curve)
FEmTool_Curve.D0 = new_instancemethod(_FEmTool.FEmTool_Curve_D0,None,FEmTool_Curve)
FEmTool_Curve.D1 = new_instancemethod(_FEmTool.FEmTool_Curve_D1,None,FEmTool_Curve)
FEmTool_Curve.D2 = new_instancemethod(_FEmTool.FEmTool_Curve_D2,None,FEmTool_Curve)
FEmTool_Curve.Length = new_instancemethod(_FEmTool.FEmTool_Curve_Length,None,FEmTool_Curve)
FEmTool_Curve.GetElement = new_instancemethod(_FEmTool.FEmTool_Curve_GetElement,None,FEmTool_Curve)
FEmTool_Curve.GetPolynom = new_instancemethod(_FEmTool.FEmTool_Curve_GetPolynom,None,FEmTool_Curve)
FEmTool_Curve.NbElements = new_instancemethod(_FEmTool.FEmTool_Curve_NbElements,None,FEmTool_Curve)
FEmTool_Curve.Dimension = new_instancemethod(_FEmTool.FEmTool_Curve_Dimension,None,FEmTool_Curve)
FEmTool_Curve.Base = new_instancemethod(_FEmTool.FEmTool_Curve_Base,None,FEmTool_Curve)
FEmTool_Curve.Degree = new_instancemethod(_FEmTool.FEmTool_Curve_Degree,None,FEmTool_Curve)
FEmTool_Curve.SetDegree = new_instancemethod(_FEmTool.FEmTool_Curve_SetDegree,None,FEmTool_Curve)
FEmTool_Curve.ReduceDegree = new_instancemethod(_FEmTool.FEmTool_Curve_ReduceDegree,None,FEmTool_Curve)
FEmTool_Curve._kill_pointed = new_instancemethod(_FEmTool.FEmTool_Curve__kill_pointed,None,FEmTool_Curve)
FEmTool_Curve.GetHandle = new_instancemethod(_FEmTool.FEmTool_Curve_GetHandle,None,FEmTool_Curve)
FEmTool_Curve_swigregister = _FEmTool.FEmTool_Curve_swigregister
FEmTool_Curve_swigregister(FEmTool_Curve)

class Handle_FEmTool_Curve(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _FEmTool.Handle_FEmTool_Curve_swiginit(self,_FEmTool.new_Handle_FEmTool_Curve(*args))
    DownCast = staticmethod(_FEmTool.Handle_FEmTool_Curve_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_FEmTool_Curve.Nullify = new_instancemethod(_FEmTool.Handle_FEmTool_Curve_Nullify,None,Handle_FEmTool_Curve)
Handle_FEmTool_Curve.IsNull = new_instancemethod(_FEmTool.Handle_FEmTool_Curve_IsNull,None,Handle_FEmTool_Curve)
Handle_FEmTool_Curve.GetObject = new_instancemethod(_FEmTool.Handle_FEmTool_Curve_GetObject,None,Handle_FEmTool_Curve)
Handle_FEmTool_Curve._kill_pointed = new_instancemethod(_FEmTool.Handle_FEmTool_Curve__kill_pointed,None,Handle_FEmTool_Curve)
Handle_FEmTool_Curve_swigregister = _FEmTool.Handle_FEmTool_Curve_swigregister
Handle_FEmTool_Curve_swigregister(Handle_FEmTool_Curve)

def Handle_FEmTool_Curve_DownCast(*args):
  return _FEmTool.Handle_FEmTool_Curve_DownCast(*args)
Handle_FEmTool_Curve_DownCast = _FEmTool.Handle_FEmTool_Curve_DownCast

class FEmTool_ElementaryCriterion(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def Set(self, *args):
        """
        * Set the coefficient of the Element (the Curve)

        :param Coeff:
        :type Coeff: Handle_TColStd_HArray2OfReal &
        :rtype: None

        * Set the definition interval of the Element

        :param FirstKnot:
        :type FirstKnot: float
        :param LastKnot:
        :type LastKnot: float
        :rtype: void

        """
        return _FEmTool.FEmTool_ElementaryCriterion_Set(self, *args)

    def DependenceTable(self):
        """
        * To know if two dimension are independent.

        :rtype: Handle_TColStd_HArray2OfInteger

        """
        return _FEmTool.FEmTool_ElementaryCriterion_DependenceTable(self)

    def Value(self):
        """
        * To Compute J(E) where E is the current Element

        :rtype: float

        """
        return _FEmTool.FEmTool_ElementaryCriterion_Value(self)

    def Hessian(self, *args):
        """
        * To Compute J(E) the coefficients of Hessian matrix of J(E) wich are crossed derivatives in dimensions <Dim1> and <Dim2>. If DependenceTable(Dimension1,Dimension2) is False

        :param Dim1:
        :type Dim1: Standard_Integer
        :param Dim2:
        :type Dim2: Standard_Integer
        :param H:
        :type H: math_Matrix &
        :rtype: void

        """
        return _FEmTool.FEmTool_ElementaryCriterion_Hessian(self, *args)

    def Gradient(self, *args):
        """
        * To Compute the coefficients in the dimension <dim> of the J(E)'s Gradient where E is the current Element

        :param Dim:
        :type Dim: Standard_Integer
        :param G:
        :type G: math_Vector &
        :rtype: void

        """
        return _FEmTool.FEmTool_ElementaryCriterion_Gradient(self, *args)

    def _kill_pointed(self):
        """_kill_pointed(FEmTool_ElementaryCriterion self)"""
        return _FEmTool.FEmTool_ElementaryCriterion__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(FEmTool_ElementaryCriterion self) -> Handle_FEmTool_ElementaryCriterion"""
        return _FEmTool.FEmTool_ElementaryCriterion_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


FEmTool_ElementaryCriterion.Set = new_instancemethod(_FEmTool.FEmTool_ElementaryCriterion_Set,None,FEmTool_ElementaryCriterion)
FEmTool_ElementaryCriterion.DependenceTable = new_instancemethod(_FEmTool.FEmTool_ElementaryCriterion_DependenceTable,None,FEmTool_ElementaryCriterion)
FEmTool_ElementaryCriterion.Value = new_instancemethod(_FEmTool.FEmTool_ElementaryCriterion_Value,None,FEmTool_ElementaryCriterion)
FEmTool_ElementaryCriterion.Hessian = new_instancemethod(_FEmTool.FEmTool_ElementaryCriterion_Hessian,None,FEmTool_ElementaryCriterion)
FEmTool_ElementaryCriterion.Gradient = new_instancemethod(_FEmTool.FEmTool_ElementaryCriterion_Gradient,None,FEmTool_ElementaryCriterion)
FEmTool_ElementaryCriterion._kill_pointed = new_instancemethod(_FEmTool.FEmTool_ElementaryCriterion__kill_pointed,None,FEmTool_ElementaryCriterion)
FEmTool_ElementaryCriterion.GetHandle = new_instancemethod(_FEmTool.FEmTool_ElementaryCriterion_GetHandle,None,FEmTool_ElementaryCriterion)
FEmTool_ElementaryCriterion_swigregister = _FEmTool.FEmTool_ElementaryCriterion_swigregister
FEmTool_ElementaryCriterion_swigregister(FEmTool_ElementaryCriterion)

class Handle_FEmTool_ElementaryCriterion(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _FEmTool.Handle_FEmTool_ElementaryCriterion_swiginit(self,_FEmTool.new_Handle_FEmTool_ElementaryCriterion(*args))
    DownCast = staticmethod(_FEmTool.Handle_FEmTool_ElementaryCriterion_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_FEmTool_ElementaryCriterion.Nullify = new_instancemethod(_FEmTool.Handle_FEmTool_ElementaryCriterion_Nullify,None,Handle_FEmTool_ElementaryCriterion)
Handle_FEmTool_ElementaryCriterion.IsNull = new_instancemethod(_FEmTool.Handle_FEmTool_ElementaryCriterion_IsNull,None,Handle_FEmTool_ElementaryCriterion)
Handle_FEmTool_ElementaryCriterion.GetObject = new_instancemethod(_FEmTool.Handle_FEmTool_ElementaryCriterion_GetObject,None,Handle_FEmTool_ElementaryCriterion)
Handle_FEmTool_ElementaryCriterion._kill_pointed = new_instancemethod(_FEmTool.Handle_FEmTool_ElementaryCriterion__kill_pointed,None,Handle_FEmTool_ElementaryCriterion)
Handle_FEmTool_ElementaryCriterion_swigregister = _FEmTool.Handle_FEmTool_ElementaryCriterion_swigregister
Handle_FEmTool_ElementaryCriterion_swigregister(Handle_FEmTool_ElementaryCriterion)

def Handle_FEmTool_ElementaryCriterion_DownCast(*args):
  return _FEmTool.Handle_FEmTool_ElementaryCriterion_DownCast(*args)
Handle_FEmTool_ElementaryCriterion_DownCast = _FEmTool.Handle_FEmTool_ElementaryCriterion_DownCast

class FEmTool_ElementsOfRefMatrix(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param TheBase:
        :type TheBase: Handle_PLib_Base &
        :param DerOrder:
        :type DerOrder: Standard_Integer
        :rtype: None

        """
        _FEmTool.FEmTool_ElementsOfRefMatrix_swiginit(self,_FEmTool.new_FEmTool_ElementsOfRefMatrix(*args))
    def NbVariables(self):
        """
        * returns the number of variables of the function. It is supposed that NbVariables = 1.

        :rtype: int

        """
        return _FEmTool.FEmTool_ElementsOfRefMatrix_NbVariables(self)

    def NbEquations(self):
        """
        * returns the number of equations of the function.

        :rtype: int

        """
        return _FEmTool.FEmTool_ElementsOfRefMatrix_NbEquations(self)

    def Value(self, *args):
        """
        * computes the values <F> of the functions for the variable <X>. returns True if the computation was done successfully, False otherwise. F contains results only for i<=j in following order: P0*P0, P0*P1, P0*P2... P1*P1, P1*P2,... (upper triangle of matrix {PiPj})

        :param X:
        :type X: math_Vector &
        :param F:
        :type F: math_Vector &
        :rtype: bool

        """
        return _FEmTool.FEmTool_ElementsOfRefMatrix_Value(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


FEmTool_ElementsOfRefMatrix.NbVariables = new_instancemethod(_FEmTool.FEmTool_ElementsOfRefMatrix_NbVariables,None,FEmTool_ElementsOfRefMatrix)
FEmTool_ElementsOfRefMatrix.NbEquations = new_instancemethod(_FEmTool.FEmTool_ElementsOfRefMatrix_NbEquations,None,FEmTool_ElementsOfRefMatrix)
FEmTool_ElementsOfRefMatrix.Value = new_instancemethod(_FEmTool.FEmTool_ElementsOfRefMatrix_Value,None,FEmTool_ElementsOfRefMatrix)
FEmTool_ElementsOfRefMatrix._kill_pointed = new_instancemethod(_FEmTool.FEmTool_ElementsOfRefMatrix__kill_pointed,None,FEmTool_ElementsOfRefMatrix)
FEmTool_ElementsOfRefMatrix_swigregister = _FEmTool.FEmTool_ElementsOfRefMatrix_swigregister
FEmTool_ElementsOfRefMatrix_swigregister(FEmTool_ElementsOfRefMatrix)

class FEmTool_HAssemblyTable(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param R1:
        :type R1: Standard_Integer
        :param R2:
        :type R2: Standard_Integer
        :param C1:
        :type C1: Standard_Integer
        :param C2:
        :type C2: Standard_Integer
        :rtype: None

        :param R1:
        :type R1: Standard_Integer
        :param R2:
        :type R2: Standard_Integer
        :param C1:
        :type C1: Standard_Integer
        :param C2:
        :type C2: Standard_Integer
        :param V:
        :type V: Handle_TColStd_HArray1OfInteger &
        :rtype: None

        """
        _FEmTool.FEmTool_HAssemblyTable_swiginit(self,_FEmTool.new_FEmTool_HAssemblyTable(*args))
    def Init(self, *args):
        """
        :param V:
        :type V: Handle_TColStd_HArray1OfInteger &
        :rtype: None

        """
        return _FEmTool.FEmTool_HAssemblyTable_Init(self, *args)

    def ColLength(self):
        """
        :rtype: int

        """
        return _FEmTool.FEmTool_HAssemblyTable_ColLength(self)

    def RowLength(self):
        """
        :rtype: int

        """
        return _FEmTool.FEmTool_HAssemblyTable_RowLength(self)

    def LowerCol(self):
        """
        :rtype: int

        """
        return _FEmTool.FEmTool_HAssemblyTable_LowerCol(self)

    def LowerRow(self):
        """
        :rtype: int

        """
        return _FEmTool.FEmTool_HAssemblyTable_LowerRow(self)

    def UpperCol(self):
        """
        :rtype: int

        """
        return _FEmTool.FEmTool_HAssemblyTable_UpperCol(self)

    def UpperRow(self):
        """
        :rtype: int

        """
        return _FEmTool.FEmTool_HAssemblyTable_UpperRow(self)

    def SetValue(self, *args):
        """
        :param Row:
        :type Row: Standard_Integer
        :param Col:
        :type Col: Standard_Integer
        :param Value:
        :type Value: Handle_TColStd_HArray1OfInteger &
        :rtype: None

        """
        return _FEmTool.FEmTool_HAssemblyTable_SetValue(self, *args)

    def Value(self, *args):
        """
        :param Row:
        :type Row: Standard_Integer
        :param Col:
        :type Col: Standard_Integer
        :rtype: Handle_TColStd_HArray1OfInteger

        """
        return _FEmTool.FEmTool_HAssemblyTable_Value(self, *args)

    def ChangeValue(self, *args):
        """
        :param Row:
        :type Row: Standard_Integer
        :param Col:
        :type Col: Standard_Integer
        :rtype: Handle_TColStd_HArray1OfInteger

        """
        return _FEmTool.FEmTool_HAssemblyTable_ChangeValue(self, *args)

    def Array2(self):
        """
        :rtype: FEmTool_AssemblyTable

        """
        return _FEmTool.FEmTool_HAssemblyTable_Array2(self)

    def ChangeArray2(self):
        """
        :rtype: FEmTool_AssemblyTable

        """
        return _FEmTool.FEmTool_HAssemblyTable_ChangeArray2(self)

    def _kill_pointed(self):
        """_kill_pointed(FEmTool_HAssemblyTable self)"""
        return _FEmTool.FEmTool_HAssemblyTable__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(FEmTool_HAssemblyTable self) -> Handle_FEmTool_HAssemblyTable"""
        return _FEmTool.FEmTool_HAssemblyTable_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


FEmTool_HAssemblyTable.Init = new_instancemethod(_FEmTool.FEmTool_HAssemblyTable_Init,None,FEmTool_HAssemblyTable)
FEmTool_HAssemblyTable.ColLength = new_instancemethod(_FEmTool.FEmTool_HAssemblyTable_ColLength,None,FEmTool_HAssemblyTable)
FEmTool_HAssemblyTable.RowLength = new_instancemethod(_FEmTool.FEmTool_HAssemblyTable_RowLength,None,FEmTool_HAssemblyTable)
FEmTool_HAssemblyTable.LowerCol = new_instancemethod(_FEmTool.FEmTool_HAssemblyTable_LowerCol,None,FEmTool_HAssemblyTable)
FEmTool_HAssemblyTable.LowerRow = new_instancemethod(_FEmTool.FEmTool_HAssemblyTable_LowerRow,None,FEmTool_HAssemblyTable)
FEmTool_HAssemblyTable.UpperCol = new_instancemethod(_FEmTool.FEmTool_HAssemblyTable_UpperCol,None,FEmTool_HAssemblyTable)
FEmTool_HAssemblyTable.UpperRow = new_instancemethod(_FEmTool.FEmTool_HAssemblyTable_UpperRow,None,FEmTool_HAssemblyTable)
FEmTool_HAssemblyTable.SetValue = new_instancemethod(_FEmTool.FEmTool_HAssemblyTable_SetValue,None,FEmTool_HAssemblyTable)
FEmTool_HAssemblyTable.Value = new_instancemethod(_FEmTool.FEmTool_HAssemblyTable_Value,None,FEmTool_HAssemblyTable)
FEmTool_HAssemblyTable.ChangeValue = new_instancemethod(_FEmTool.FEmTool_HAssemblyTable_ChangeValue,None,FEmTool_HAssemblyTable)
FEmTool_HAssemblyTable.Array2 = new_instancemethod(_FEmTool.FEmTool_HAssemblyTable_Array2,None,FEmTool_HAssemblyTable)
FEmTool_HAssemblyTable.ChangeArray2 = new_instancemethod(_FEmTool.FEmTool_HAssemblyTable_ChangeArray2,None,FEmTool_HAssemblyTable)
FEmTool_HAssemblyTable._kill_pointed = new_instancemethod(_FEmTool.FEmTool_HAssemblyTable__kill_pointed,None,FEmTool_HAssemblyTable)
FEmTool_HAssemblyTable.GetHandle = new_instancemethod(_FEmTool.FEmTool_HAssemblyTable_GetHandle,None,FEmTool_HAssemblyTable)
FEmTool_HAssemblyTable_swigregister = _FEmTool.FEmTool_HAssemblyTable_swigregister
FEmTool_HAssemblyTable_swigregister(FEmTool_HAssemblyTable)

class Handle_FEmTool_HAssemblyTable(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _FEmTool.Handle_FEmTool_HAssemblyTable_swiginit(self,_FEmTool.new_Handle_FEmTool_HAssemblyTable(*args))
    DownCast = staticmethod(_FEmTool.Handle_FEmTool_HAssemblyTable_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_FEmTool_HAssemblyTable.Nullify = new_instancemethod(_FEmTool.Handle_FEmTool_HAssemblyTable_Nullify,None,Handle_FEmTool_HAssemblyTable)
Handle_FEmTool_HAssemblyTable.IsNull = new_instancemethod(_FEmTool.Handle_FEmTool_HAssemblyTable_IsNull,None,Handle_FEmTool_HAssemblyTable)
Handle_FEmTool_HAssemblyTable.GetObject = new_instancemethod(_FEmTool.Handle_FEmTool_HAssemblyTable_GetObject,None,Handle_FEmTool_HAssemblyTable)
Handle_FEmTool_HAssemblyTable._kill_pointed = new_instancemethod(_FEmTool.Handle_FEmTool_HAssemblyTable__kill_pointed,None,Handle_FEmTool_HAssemblyTable)
Handle_FEmTool_HAssemblyTable_swigregister = _FEmTool.Handle_FEmTool_HAssemblyTable_swigregister
Handle_FEmTool_HAssemblyTable_swigregister(Handle_FEmTool_HAssemblyTable)

def Handle_FEmTool_HAssemblyTable_DownCast(*args):
  return _FEmTool.Handle_FEmTool_HAssemblyTable_DownCast(*args)
Handle_FEmTool_HAssemblyTable_DownCast = _FEmTool.Handle_FEmTool_HAssemblyTable_DownCast

class FEmTool_ListIteratorOfListOfVectors(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :rtype: None

        :param L:
        :type L: FEmTool_ListOfVectors &
        :rtype: None

        """
        _FEmTool.FEmTool_ListIteratorOfListOfVectors_swiginit(self,_FEmTool.new_FEmTool_ListIteratorOfListOfVectors(*args))
    def Initialize(self, *args):
        """
        :param L:
        :type L: FEmTool_ListOfVectors &
        :rtype: None

        """
        return _FEmTool.FEmTool_ListIteratorOfListOfVectors_Initialize(self, *args)

    def More(self):
        """
        :rtype: bool

        """
        return _FEmTool.FEmTool_ListIteratorOfListOfVectors_More(self)

    def Next(self):
        """
        :rtype: None

        """
        return _FEmTool.FEmTool_ListIteratorOfListOfVectors_Next(self)

    def Value(self):
        """
        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _FEmTool.FEmTool_ListIteratorOfListOfVectors_Value(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


FEmTool_ListIteratorOfListOfVectors.Initialize = new_instancemethod(_FEmTool.FEmTool_ListIteratorOfListOfVectors_Initialize,None,FEmTool_ListIteratorOfListOfVectors)
FEmTool_ListIteratorOfListOfVectors.More = new_instancemethod(_FEmTool.FEmTool_ListIteratorOfListOfVectors_More,None,FEmTool_ListIteratorOfListOfVectors)
FEmTool_ListIteratorOfListOfVectors.Next = new_instancemethod(_FEmTool.FEmTool_ListIteratorOfListOfVectors_Next,None,FEmTool_ListIteratorOfListOfVectors)
FEmTool_ListIteratorOfListOfVectors.Value = new_instancemethod(_FEmTool.FEmTool_ListIteratorOfListOfVectors_Value,None,FEmTool_ListIteratorOfListOfVectors)
FEmTool_ListIteratorOfListOfVectors._kill_pointed = new_instancemethod(_FEmTool.FEmTool_ListIteratorOfListOfVectors__kill_pointed,None,FEmTool_ListIteratorOfListOfVectors)
FEmTool_ListIteratorOfListOfVectors_swigregister = _FEmTool.FEmTool_ListIteratorOfListOfVectors_swigregister
FEmTool_ListIteratorOfListOfVectors_swigregister(FEmTool_ListIteratorOfListOfVectors)

class FEmTool_ListNodeOfListOfVectors(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param I:
        :type I: Handle_TColStd_HArray1OfReal &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _FEmTool.FEmTool_ListNodeOfListOfVectors_swiginit(self,_FEmTool.new_FEmTool_ListNodeOfListOfVectors(*args))
    def Value(self):
        """
        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _FEmTool.FEmTool_ListNodeOfListOfVectors_Value(self)

    def _kill_pointed(self):
        """_kill_pointed(FEmTool_ListNodeOfListOfVectors self)"""
        return _FEmTool.FEmTool_ListNodeOfListOfVectors__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(FEmTool_ListNodeOfListOfVectors self) -> Handle_FEmTool_ListNodeOfListOfVectors"""
        return _FEmTool.FEmTool_ListNodeOfListOfVectors_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


FEmTool_ListNodeOfListOfVectors.Value = new_instancemethod(_FEmTool.FEmTool_ListNodeOfListOfVectors_Value,None,FEmTool_ListNodeOfListOfVectors)
FEmTool_ListNodeOfListOfVectors._kill_pointed = new_instancemethod(_FEmTool.FEmTool_ListNodeOfListOfVectors__kill_pointed,None,FEmTool_ListNodeOfListOfVectors)
FEmTool_ListNodeOfListOfVectors.GetHandle = new_instancemethod(_FEmTool.FEmTool_ListNodeOfListOfVectors_GetHandle,None,FEmTool_ListNodeOfListOfVectors)
FEmTool_ListNodeOfListOfVectors_swigregister = _FEmTool.FEmTool_ListNodeOfListOfVectors_swigregister
FEmTool_ListNodeOfListOfVectors_swigregister(FEmTool_ListNodeOfListOfVectors)

class Handle_FEmTool_ListNodeOfListOfVectors(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _FEmTool.Handle_FEmTool_ListNodeOfListOfVectors_swiginit(self,_FEmTool.new_Handle_FEmTool_ListNodeOfListOfVectors(*args))
    DownCast = staticmethod(_FEmTool.Handle_FEmTool_ListNodeOfListOfVectors_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_FEmTool_ListNodeOfListOfVectors.Nullify = new_instancemethod(_FEmTool.Handle_FEmTool_ListNodeOfListOfVectors_Nullify,None,Handle_FEmTool_ListNodeOfListOfVectors)
Handle_FEmTool_ListNodeOfListOfVectors.IsNull = new_instancemethod(_FEmTool.Handle_FEmTool_ListNodeOfListOfVectors_IsNull,None,Handle_FEmTool_ListNodeOfListOfVectors)
Handle_FEmTool_ListNodeOfListOfVectors.GetObject = new_instancemethod(_FEmTool.Handle_FEmTool_ListNodeOfListOfVectors_GetObject,None,Handle_FEmTool_ListNodeOfListOfVectors)
Handle_FEmTool_ListNodeOfListOfVectors._kill_pointed = new_instancemethod(_FEmTool.Handle_FEmTool_ListNodeOfListOfVectors__kill_pointed,None,Handle_FEmTool_ListNodeOfListOfVectors)
Handle_FEmTool_ListNodeOfListOfVectors_swigregister = _FEmTool.Handle_FEmTool_ListNodeOfListOfVectors_swigregister
Handle_FEmTool_ListNodeOfListOfVectors_swigregister(Handle_FEmTool_ListNodeOfListOfVectors)

def Handle_FEmTool_ListNodeOfListOfVectors_DownCast(*args):
  return _FEmTool.Handle_FEmTool_ListNodeOfListOfVectors_DownCast(*args)
Handle_FEmTool_ListNodeOfListOfVectors_DownCast = _FEmTool.Handle_FEmTool_ListNodeOfListOfVectors_DownCast

class FEmTool_ListOfVectors(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """
        :rtype: None

        """
        _FEmTool.FEmTool_ListOfVectors_swiginit(self,_FEmTool.new_FEmTool_ListOfVectors())
    def Assign(self, *args):
        """
        :param Other:
        :type Other: FEmTool_ListOfVectors &
        :rtype: None

        """
        return _FEmTool.FEmTool_ListOfVectors_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: FEmTool_ListOfVectors &
        :rtype: None

        """
        return _FEmTool.FEmTool_ListOfVectors_Set(self, *args)

    def Extent(self):
        """
        :rtype: int

        """
        return _FEmTool.FEmTool_ListOfVectors_Extent(self)

    def Clear(self):
        """
        :rtype: None

        """
        return _FEmTool.FEmTool_ListOfVectors_Clear(self)

    def IsEmpty(self):
        """
        :rtype: bool

        """
        return _FEmTool.FEmTool_ListOfVectors_IsEmpty(self)

    def Prepend(self, *args):
        """
        :param I:
        :type I: Handle_TColStd_HArray1OfReal &
        :rtype: None

        :param I:
        :type I: Handle_TColStd_HArray1OfReal &
        :param theIt:
        :type theIt: FEmTool_ListIteratorOfListOfVectors &
        :rtype: None

        :param Other:
        :type Other: FEmTool_ListOfVectors &
        :rtype: None

        """
        return _FEmTool.FEmTool_ListOfVectors_Prepend(self, *args)

    def Append(self, *args):
        """
        :param I:
        :type I: Handle_TColStd_HArray1OfReal &
        :rtype: None

        :param I:
        :type I: Handle_TColStd_HArray1OfReal &
        :param theIt:
        :type theIt: FEmTool_ListIteratorOfListOfVectors &
        :rtype: None

        :param Other:
        :type Other: FEmTool_ListOfVectors &
        :rtype: None

        """
        return _FEmTool.FEmTool_ListOfVectors_Append(self, *args)

    def First(self):
        """
        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _FEmTool.FEmTool_ListOfVectors_First(self)

    def Last(self):
        """
        :rtype: Handle_TColStd_HArray1OfReal

        """
        return _FEmTool.FEmTool_ListOfVectors_Last(self)

    def RemoveFirst(self):
        """
        :rtype: None

        """
        return _FEmTool.FEmTool_ListOfVectors_RemoveFirst(self)

    def Remove(self, *args):
        """
        :param It:
        :type It: FEmTool_ListIteratorOfListOfVectors &
        :rtype: None

        """
        return _FEmTool.FEmTool_ListOfVectors_Remove(self, *args)

    def InsertBefore(self, *args):
        """
        :param I:
        :type I: Handle_TColStd_HArray1OfReal &
        :param It:
        :type It: FEmTool_ListIteratorOfListOfVectors &
        :rtype: None

        :param Other:
        :type Other: FEmTool_ListOfVectors &
        :param It:
        :type It: FEmTool_ListIteratorOfListOfVectors &
        :rtype: None

        """
        return _FEmTool.FEmTool_ListOfVectors_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        """
        :param I:
        :type I: Handle_TColStd_HArray1OfReal &
        :param It:
        :type It: FEmTool_ListIteratorOfListOfVectors &
        :rtype: None

        :param Other:
        :type Other: FEmTool_ListOfVectors &
        :param It:
        :type It: FEmTool_ListIteratorOfListOfVectors &
        :rtype: None

        """
        return _FEmTool.FEmTool_ListOfVectors_InsertAfter(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


FEmTool_ListOfVectors.Assign = new_instancemethod(_FEmTool.FEmTool_ListOfVectors_Assign,None,FEmTool_ListOfVectors)
FEmTool_ListOfVectors.Set = new_instancemethod(_FEmTool.FEmTool_ListOfVectors_Set,None,FEmTool_ListOfVectors)
FEmTool_ListOfVectors.Extent = new_instancemethod(_FEmTool.FEmTool_ListOfVectors_Extent,None,FEmTool_ListOfVectors)
FEmTool_ListOfVectors.Clear = new_instancemethod(_FEmTool.FEmTool_ListOfVectors_Clear,None,FEmTool_ListOfVectors)
FEmTool_ListOfVectors.IsEmpty = new_instancemethod(_FEmTool.FEmTool_ListOfVectors_IsEmpty,None,FEmTool_ListOfVectors)
FEmTool_ListOfVectors.Prepend = new_instancemethod(_FEmTool.FEmTool_ListOfVectors_Prepend,None,FEmTool_ListOfVectors)
FEmTool_ListOfVectors.Append = new_instancemethod(_FEmTool.FEmTool_ListOfVectors_Append,None,FEmTool_ListOfVectors)
FEmTool_ListOfVectors.First = new_instancemethod(_FEmTool.FEmTool_ListOfVectors_First,None,FEmTool_ListOfVectors)
FEmTool_ListOfVectors.Last = new_instancemethod(_FEmTool.FEmTool_ListOfVectors_Last,None,FEmTool_ListOfVectors)
FEmTool_ListOfVectors.RemoveFirst = new_instancemethod(_FEmTool.FEmTool_ListOfVectors_RemoveFirst,None,FEmTool_ListOfVectors)
FEmTool_ListOfVectors.Remove = new_instancemethod(_FEmTool.FEmTool_ListOfVectors_Remove,None,FEmTool_ListOfVectors)
FEmTool_ListOfVectors.InsertBefore = new_instancemethod(_FEmTool.FEmTool_ListOfVectors_InsertBefore,None,FEmTool_ListOfVectors)
FEmTool_ListOfVectors.InsertAfter = new_instancemethod(_FEmTool.FEmTool_ListOfVectors_InsertAfter,None,FEmTool_ListOfVectors)
FEmTool_ListOfVectors._kill_pointed = new_instancemethod(_FEmTool.FEmTool_ListOfVectors__kill_pointed,None,FEmTool_ListOfVectors)
FEmTool_ListOfVectors_swigregister = _FEmTool.FEmTool_ListOfVectors_swigregister
FEmTool_ListOfVectors_swigregister(FEmTool_ListOfVectors)

class FEmTool_SeqOfLinConstr(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """
        :rtype: None

        """
        _FEmTool.FEmTool_SeqOfLinConstr_swiginit(self,_FEmTool.new_FEmTool_SeqOfLinConstr())
    def Clear(self):
        """
        :rtype: None

        """
        return _FEmTool.FEmTool_SeqOfLinConstr_Clear(self)

    def Assign(self, *args):
        """
        :param Other:
        :type Other: FEmTool_SeqOfLinConstr &
        :rtype: FEmTool_SeqOfLinConstr

        """
        return _FEmTool.FEmTool_SeqOfLinConstr_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: FEmTool_SeqOfLinConstr &
        :rtype: FEmTool_SeqOfLinConstr

        """
        return _FEmTool.FEmTool_SeqOfLinConstr_Set(self, *args)

    def Append(self, *args):
        """
        :param T:
        :type T: FEmTool_ListOfVectors &
        :rtype: None

        :param S:
        :type S: FEmTool_SeqOfLinConstr &
        :rtype: None

        """
        return _FEmTool.FEmTool_SeqOfLinConstr_Append(self, *args)

    def Prepend(self, *args):
        """
        :param T:
        :type T: FEmTool_ListOfVectors &
        :rtype: None

        :param S:
        :type S: FEmTool_SeqOfLinConstr &
        :rtype: None

        """
        return _FEmTool.FEmTool_SeqOfLinConstr_Prepend(self, *args)

    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: Standard_Integer
        :param T:
        :type T: FEmTool_ListOfVectors &
        :rtype: None

        :param Index:
        :type Index: Standard_Integer
        :param S:
        :type S: FEmTool_SeqOfLinConstr &
        :rtype: None

        """
        return _FEmTool.FEmTool_SeqOfLinConstr_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: Standard_Integer
        :param T:
        :type T: FEmTool_ListOfVectors &
        :rtype: None

        :param Index:
        :type Index: Standard_Integer
        :param S:
        :type S: FEmTool_SeqOfLinConstr &
        :rtype: None

        """
        return _FEmTool.FEmTool_SeqOfLinConstr_InsertAfter(self, *args)

    def First(self):
        """
        :rtype: FEmTool_ListOfVectors

        """
        return _FEmTool.FEmTool_SeqOfLinConstr_First(self)

    def Last(self):
        """
        :rtype: FEmTool_ListOfVectors

        """
        return _FEmTool.FEmTool_SeqOfLinConstr_Last(self)

    def Split(self, *args):
        """
        :param Index:
        :type Index: Standard_Integer
        :param Sub:
        :type Sub: FEmTool_SeqOfLinConstr &
        :rtype: None

        """
        return _FEmTool.FEmTool_SeqOfLinConstr_Split(self, *args)

    def Value(self, *args):
        """
        :param Index:
        :type Index: Standard_Integer
        :rtype: FEmTool_ListOfVectors

        """
        return _FEmTool.FEmTool_SeqOfLinConstr_Value(self, *args)

    def SetValue(self, *args):
        """
        :param Index:
        :type Index: Standard_Integer
        :param I:
        :type I: FEmTool_ListOfVectors &
        :rtype: None

        """
        return _FEmTool.FEmTool_SeqOfLinConstr_SetValue(self, *args)

    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: Standard_Integer
        :rtype: FEmTool_ListOfVectors

        """
        return _FEmTool.FEmTool_SeqOfLinConstr_ChangeValue(self, *args)

    def Remove(self, *args):
        """
        :param Index:
        :type Index: Standard_Integer
        :rtype: None

        :param FromIndex:
        :type FromIndex: Standard_Integer
        :param ToIndex:
        :type ToIndex: Standard_Integer
        :rtype: None

        """
        return _FEmTool.FEmTool_SeqOfLinConstr_Remove(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


FEmTool_SeqOfLinConstr.Clear = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_Clear,None,FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.Assign = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_Assign,None,FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.Set = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_Set,None,FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.Append = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_Append,None,FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.Prepend = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_Prepend,None,FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.InsertBefore = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_InsertBefore,None,FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.InsertAfter = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_InsertAfter,None,FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.First = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_First,None,FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.Last = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_Last,None,FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.Split = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_Split,None,FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.Value = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_Value,None,FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.SetValue = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_SetValue,None,FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.ChangeValue = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_ChangeValue,None,FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr.Remove = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr_Remove,None,FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr._kill_pointed = new_instancemethod(_FEmTool.FEmTool_SeqOfLinConstr__kill_pointed,None,FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr_swigregister = _FEmTool.FEmTool_SeqOfLinConstr_swigregister
FEmTool_SeqOfLinConstr_swigregister(FEmTool_SeqOfLinConstr)

class FEmTool_SequenceNodeOfSeqOfLinConstr(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param I:
        :type I: FEmTool_ListOfVectors &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _FEmTool.FEmTool_SequenceNodeOfSeqOfLinConstr_swiginit(self,_FEmTool.new_FEmTool_SequenceNodeOfSeqOfLinConstr(*args))
    def Value(self):
        """
        :rtype: FEmTool_ListOfVectors

        """
        return _FEmTool.FEmTool_SequenceNodeOfSeqOfLinConstr_Value(self)

    def _kill_pointed(self):
        """_kill_pointed(FEmTool_SequenceNodeOfSeqOfLinConstr self)"""
        return _FEmTool.FEmTool_SequenceNodeOfSeqOfLinConstr__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(FEmTool_SequenceNodeOfSeqOfLinConstr self) -> Handle_FEmTool_SequenceNodeOfSeqOfLinConstr"""
        return _FEmTool.FEmTool_SequenceNodeOfSeqOfLinConstr_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


FEmTool_SequenceNodeOfSeqOfLinConstr.Value = new_instancemethod(_FEmTool.FEmTool_SequenceNodeOfSeqOfLinConstr_Value,None,FEmTool_SequenceNodeOfSeqOfLinConstr)
FEmTool_SequenceNodeOfSeqOfLinConstr._kill_pointed = new_instancemethod(_FEmTool.FEmTool_SequenceNodeOfSeqOfLinConstr__kill_pointed,None,FEmTool_SequenceNodeOfSeqOfLinConstr)
FEmTool_SequenceNodeOfSeqOfLinConstr.GetHandle = new_instancemethod(_FEmTool.FEmTool_SequenceNodeOfSeqOfLinConstr_GetHandle,None,FEmTool_SequenceNodeOfSeqOfLinConstr)
FEmTool_SequenceNodeOfSeqOfLinConstr_swigregister = _FEmTool.FEmTool_SequenceNodeOfSeqOfLinConstr_swigregister
FEmTool_SequenceNodeOfSeqOfLinConstr_swigregister(FEmTool_SequenceNodeOfSeqOfLinConstr)

class Handle_FEmTool_SequenceNodeOfSeqOfLinConstr(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _FEmTool.Handle_FEmTool_SequenceNodeOfSeqOfLinConstr_swiginit(self,_FEmTool.new_Handle_FEmTool_SequenceNodeOfSeqOfLinConstr(*args))
    DownCast = staticmethod(_FEmTool.Handle_FEmTool_SequenceNodeOfSeqOfLinConstr_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_FEmTool_SequenceNodeOfSeqOfLinConstr.Nullify = new_instancemethod(_FEmTool.Handle_FEmTool_SequenceNodeOfSeqOfLinConstr_Nullify,None,Handle_FEmTool_SequenceNodeOfSeqOfLinConstr)
Handle_FEmTool_SequenceNodeOfSeqOfLinConstr.IsNull = new_instancemethod(_FEmTool.Handle_FEmTool_SequenceNodeOfSeqOfLinConstr_IsNull,None,Handle_FEmTool_SequenceNodeOfSeqOfLinConstr)
Handle_FEmTool_SequenceNodeOfSeqOfLinConstr.GetObject = new_instancemethod(_FEmTool.Handle_FEmTool_SequenceNodeOfSeqOfLinConstr_GetObject,None,Handle_FEmTool_SequenceNodeOfSeqOfLinConstr)
Handle_FEmTool_SequenceNodeOfSeqOfLinConstr._kill_pointed = new_instancemethod(_FEmTool.Handle_FEmTool_SequenceNodeOfSeqOfLinConstr__kill_pointed,None,Handle_FEmTool_SequenceNodeOfSeqOfLinConstr)
Handle_FEmTool_SequenceNodeOfSeqOfLinConstr_swigregister = _FEmTool.Handle_FEmTool_SequenceNodeOfSeqOfLinConstr_swigregister
Handle_FEmTool_SequenceNodeOfSeqOfLinConstr_swigregister(Handle_FEmTool_SequenceNodeOfSeqOfLinConstr)

def Handle_FEmTool_SequenceNodeOfSeqOfLinConstr_DownCast(*args):
  return _FEmTool.Handle_FEmTool_SequenceNodeOfSeqOfLinConstr_DownCast(*args)
Handle_FEmTool_SequenceNodeOfSeqOfLinConstr_DownCast = _FEmTool.Handle_FEmTool_SequenceNodeOfSeqOfLinConstr_DownCast

class FEmTool_SparseMatrix(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def Init(self, *args):
        """
        :param Value:
        :type Value: float
        :rtype: void

        """
        return _FEmTool.FEmTool_SparseMatrix_Init(self, *args)

    def ChangeValue(self, *args):
        """
        :param I:
        :type I: Standard_Integer
        :param J:
        :type J: Standard_Integer
        :rtype: float

        """
        return _FEmTool.FEmTool_SparseMatrix_ChangeValue(self, *args)

    def Decompose(self):
        """
        * To make a Factorization of <self>

        :rtype: bool

        """
        return _FEmTool.FEmTool_SparseMatrix_Decompose(self)

    def Prepare(self):
        """
        * Make Preparation to iterative solve

        :rtype: bool

        """
        return _FEmTool.FEmTool_SparseMatrix_Prepare(self)

    def Solve(self, *args):
        """
        * Direct Solve of AX = B

        :param B:
        :type B: math_Vector &
        :param X:
        :type X: math_Vector &
        :rtype: void

        * Iterative solve of AX = B

        :param B:
        :type B: math_Vector &
        :param Init:
        :type Init: math_Vector &
        :param X:
        :type X: math_Vector &
        :param Residual:
        :type Residual: math_Vector &
        :param Tolerance: default value is 1.0e-8
        :type Tolerance: float
        :param NbIterations: default value is 50
        :type NbIterations: Standard_Integer
        :rtype: void

        * Iterative solve of AX = B

        :param B:
        :type B: math_Vector &
        :param Init:
        :type Init: math_Vector &
        :param X:
        :type X: math_Vector &
        :param Residual:
        :type Residual: math_Vector &
        :param Tolerance: default value is 1.0e-8
        :type Tolerance: float
        :param NbIterations: default value is 50
        :type NbIterations: Standard_Integer
        :rtype: void

        * Iterative solve of AX = B

        :param B:
        :type B: math_Vector &
        :param Init:
        :type Init: math_Vector &
        :param X:
        :type X: math_Vector &
        :param Residual:
        :type Residual: math_Vector &
        :param Tolerance: default value is 1.0e-8
        :type Tolerance: float
        :param NbIterations: default value is 50
        :type NbIterations: Standard_Integer
        :rtype: void

        """
        return _FEmTool.FEmTool_SparseMatrix_Solve(self, *args)

    def Multiplied(self, *args):
        """
        * returns the product of a SparseMatrix by a vector. An exception is raised if the dimensions are different

        :param X:
        :type X: math_Vector &
        :param MX:
        :type MX: math_Vector &
        :rtype: void

        """
        return _FEmTool.FEmTool_SparseMatrix_Multiplied(self, *args)

    def RowNumber(self):
        """
        * returns the row range of a matrix.

        :rtype: int

        """
        return _FEmTool.FEmTool_SparseMatrix_RowNumber(self)

    def ColNumber(self):
        """
        * returns the column range of the matrix.

        :rtype: int

        """
        return _FEmTool.FEmTool_SparseMatrix_ColNumber(self)

    def _kill_pointed(self):
        """_kill_pointed(FEmTool_SparseMatrix self)"""
        return _FEmTool.FEmTool_SparseMatrix__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(FEmTool_SparseMatrix self) -> Handle_FEmTool_SparseMatrix"""
        return _FEmTool.FEmTool_SparseMatrix_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


FEmTool_SparseMatrix.Init = new_instancemethod(_FEmTool.FEmTool_SparseMatrix_Init,None,FEmTool_SparseMatrix)
FEmTool_SparseMatrix.ChangeValue = new_instancemethod(_FEmTool.FEmTool_SparseMatrix_ChangeValue,None,FEmTool_SparseMatrix)
FEmTool_SparseMatrix.Decompose = new_instancemethod(_FEmTool.FEmTool_SparseMatrix_Decompose,None,FEmTool_SparseMatrix)
FEmTool_SparseMatrix.Prepare = new_instancemethod(_FEmTool.FEmTool_SparseMatrix_Prepare,None,FEmTool_SparseMatrix)
FEmTool_SparseMatrix.Solve = new_instancemethod(_FEmTool.FEmTool_SparseMatrix_Solve,None,FEmTool_SparseMatrix)
FEmTool_SparseMatrix.Multiplied = new_instancemethod(_FEmTool.FEmTool_SparseMatrix_Multiplied,None,FEmTool_SparseMatrix)
FEmTool_SparseMatrix.RowNumber = new_instancemethod(_FEmTool.FEmTool_SparseMatrix_RowNumber,None,FEmTool_SparseMatrix)
FEmTool_SparseMatrix.ColNumber = new_instancemethod(_FEmTool.FEmTool_SparseMatrix_ColNumber,None,FEmTool_SparseMatrix)
FEmTool_SparseMatrix._kill_pointed = new_instancemethod(_FEmTool.FEmTool_SparseMatrix__kill_pointed,None,FEmTool_SparseMatrix)
FEmTool_SparseMatrix.GetHandle = new_instancemethod(_FEmTool.FEmTool_SparseMatrix_GetHandle,None,FEmTool_SparseMatrix)
FEmTool_SparseMatrix_swigregister = _FEmTool.FEmTool_SparseMatrix_swigregister
FEmTool_SparseMatrix_swigregister(FEmTool_SparseMatrix)

class Handle_FEmTool_SparseMatrix(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _FEmTool.Handle_FEmTool_SparseMatrix_swiginit(self,_FEmTool.new_Handle_FEmTool_SparseMatrix(*args))
    DownCast = staticmethod(_FEmTool.Handle_FEmTool_SparseMatrix_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_FEmTool_SparseMatrix.Nullify = new_instancemethod(_FEmTool.Handle_FEmTool_SparseMatrix_Nullify,None,Handle_FEmTool_SparseMatrix)
Handle_FEmTool_SparseMatrix.IsNull = new_instancemethod(_FEmTool.Handle_FEmTool_SparseMatrix_IsNull,None,Handle_FEmTool_SparseMatrix)
Handle_FEmTool_SparseMatrix.GetObject = new_instancemethod(_FEmTool.Handle_FEmTool_SparseMatrix_GetObject,None,Handle_FEmTool_SparseMatrix)
Handle_FEmTool_SparseMatrix._kill_pointed = new_instancemethod(_FEmTool.Handle_FEmTool_SparseMatrix__kill_pointed,None,Handle_FEmTool_SparseMatrix)
Handle_FEmTool_SparseMatrix_swigregister = _FEmTool.Handle_FEmTool_SparseMatrix_swigregister
Handle_FEmTool_SparseMatrix_swigregister(Handle_FEmTool_SparseMatrix)

def Handle_FEmTool_SparseMatrix_DownCast(*args):
  return _FEmTool.Handle_FEmTool_SparseMatrix_DownCast(*args)
Handle_FEmTool_SparseMatrix_DownCast = _FEmTool.Handle_FEmTool_SparseMatrix_DownCast

class FEmTool_LinearFlexion(FEmTool_ElementaryCriterion):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param WorkDegree:
        :type WorkDegree: Standard_Integer
        :param ConstraintOrder:
        :type ConstraintOrder: GeomAbs_Shape
        :rtype: None

        """
        _FEmTool.FEmTool_LinearFlexion_swiginit(self,_FEmTool.new_FEmTool_LinearFlexion(*args))
    def _kill_pointed(self):
        """_kill_pointed(FEmTool_LinearFlexion self)"""
        return _FEmTool.FEmTool_LinearFlexion__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(FEmTool_LinearFlexion self) -> Handle_FEmTool_LinearFlexion"""
        return _FEmTool.FEmTool_LinearFlexion_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


FEmTool_LinearFlexion._kill_pointed = new_instancemethod(_FEmTool.FEmTool_LinearFlexion__kill_pointed,None,FEmTool_LinearFlexion)
FEmTool_LinearFlexion.GetHandle = new_instancemethod(_FEmTool.FEmTool_LinearFlexion_GetHandle,None,FEmTool_LinearFlexion)
FEmTool_LinearFlexion_swigregister = _FEmTool.FEmTool_LinearFlexion_swigregister
FEmTool_LinearFlexion_swigregister(FEmTool_LinearFlexion)

class Handle_FEmTool_LinearFlexion(Handle_FEmTool_ElementaryCriterion):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _FEmTool.Handle_FEmTool_LinearFlexion_swiginit(self,_FEmTool.new_Handle_FEmTool_LinearFlexion(*args))
    DownCast = staticmethod(_FEmTool.Handle_FEmTool_LinearFlexion_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_FEmTool_LinearFlexion.Nullify = new_instancemethod(_FEmTool.Handle_FEmTool_LinearFlexion_Nullify,None,Handle_FEmTool_LinearFlexion)
Handle_FEmTool_LinearFlexion.IsNull = new_instancemethod(_FEmTool.Handle_FEmTool_LinearFlexion_IsNull,None,Handle_FEmTool_LinearFlexion)
Handle_FEmTool_LinearFlexion.GetObject = new_instancemethod(_FEmTool.Handle_FEmTool_LinearFlexion_GetObject,None,Handle_FEmTool_LinearFlexion)
Handle_FEmTool_LinearFlexion._kill_pointed = new_instancemethod(_FEmTool.Handle_FEmTool_LinearFlexion__kill_pointed,None,Handle_FEmTool_LinearFlexion)
Handle_FEmTool_LinearFlexion_swigregister = _FEmTool.Handle_FEmTool_LinearFlexion_swigregister
Handle_FEmTool_LinearFlexion_swigregister(Handle_FEmTool_LinearFlexion)

def Handle_FEmTool_LinearFlexion_DownCast(*args):
  return _FEmTool.Handle_FEmTool_LinearFlexion_DownCast(*args)
Handle_FEmTool_LinearFlexion_DownCast = _FEmTool.Handle_FEmTool_LinearFlexion_DownCast

class FEmTool_LinearJerk(FEmTool_ElementaryCriterion):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param WorkDegree:
        :type WorkDegree: Standard_Integer
        :param ConstraintOrder:
        :type ConstraintOrder: GeomAbs_Shape
        :rtype: None

        """
        _FEmTool.FEmTool_LinearJerk_swiginit(self,_FEmTool.new_FEmTool_LinearJerk(*args))
    def _kill_pointed(self):
        """_kill_pointed(FEmTool_LinearJerk self)"""
        return _FEmTool.FEmTool_LinearJerk__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(FEmTool_LinearJerk self) -> Handle_FEmTool_LinearJerk"""
        return _FEmTool.FEmTool_LinearJerk_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


FEmTool_LinearJerk._kill_pointed = new_instancemethod(_FEmTool.FEmTool_LinearJerk__kill_pointed,None,FEmTool_LinearJerk)
FEmTool_LinearJerk.GetHandle = new_instancemethod(_FEmTool.FEmTool_LinearJerk_GetHandle,None,FEmTool_LinearJerk)
FEmTool_LinearJerk_swigregister = _FEmTool.FEmTool_LinearJerk_swigregister
FEmTool_LinearJerk_swigregister(FEmTool_LinearJerk)

class Handle_FEmTool_LinearJerk(Handle_FEmTool_ElementaryCriterion):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _FEmTool.Handle_FEmTool_LinearJerk_swiginit(self,_FEmTool.new_Handle_FEmTool_LinearJerk(*args))
    DownCast = staticmethod(_FEmTool.Handle_FEmTool_LinearJerk_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_FEmTool_LinearJerk.Nullify = new_instancemethod(_FEmTool.Handle_FEmTool_LinearJerk_Nullify,None,Handle_FEmTool_LinearJerk)
Handle_FEmTool_LinearJerk.IsNull = new_instancemethod(_FEmTool.Handle_FEmTool_LinearJerk_IsNull,None,Handle_FEmTool_LinearJerk)
Handle_FEmTool_LinearJerk.GetObject = new_instancemethod(_FEmTool.Handle_FEmTool_LinearJerk_GetObject,None,Handle_FEmTool_LinearJerk)
Handle_FEmTool_LinearJerk._kill_pointed = new_instancemethod(_FEmTool.Handle_FEmTool_LinearJerk__kill_pointed,None,Handle_FEmTool_LinearJerk)
Handle_FEmTool_LinearJerk_swigregister = _FEmTool.Handle_FEmTool_LinearJerk_swigregister
Handle_FEmTool_LinearJerk_swigregister(Handle_FEmTool_LinearJerk)

def Handle_FEmTool_LinearJerk_DownCast(*args):
  return _FEmTool.Handle_FEmTool_LinearJerk_DownCast(*args)
Handle_FEmTool_LinearJerk_DownCast = _FEmTool.Handle_FEmTool_LinearJerk_DownCast

class FEmTool_LinearTension(FEmTool_ElementaryCriterion):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param WorkDegree:
        :type WorkDegree: Standard_Integer
        :param ConstraintOrder:
        :type ConstraintOrder: GeomAbs_Shape
        :rtype: None

        """
        _FEmTool.FEmTool_LinearTension_swiginit(self,_FEmTool.new_FEmTool_LinearTension(*args))
    def _kill_pointed(self):
        """_kill_pointed(FEmTool_LinearTension self)"""
        return _FEmTool.FEmTool_LinearTension__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(FEmTool_LinearTension self) -> Handle_FEmTool_LinearTension"""
        return _FEmTool.FEmTool_LinearTension_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


FEmTool_LinearTension._kill_pointed = new_instancemethod(_FEmTool.FEmTool_LinearTension__kill_pointed,None,FEmTool_LinearTension)
FEmTool_LinearTension.GetHandle = new_instancemethod(_FEmTool.FEmTool_LinearTension_GetHandle,None,FEmTool_LinearTension)
FEmTool_LinearTension_swigregister = _FEmTool.FEmTool_LinearTension_swigregister
FEmTool_LinearTension_swigregister(FEmTool_LinearTension)

class Handle_FEmTool_LinearTension(Handle_FEmTool_ElementaryCriterion):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _FEmTool.Handle_FEmTool_LinearTension_swiginit(self,_FEmTool.new_Handle_FEmTool_LinearTension(*args))
    DownCast = staticmethod(_FEmTool.Handle_FEmTool_LinearTension_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_FEmTool_LinearTension.Nullify = new_instancemethod(_FEmTool.Handle_FEmTool_LinearTension_Nullify,None,Handle_FEmTool_LinearTension)
Handle_FEmTool_LinearTension.IsNull = new_instancemethod(_FEmTool.Handle_FEmTool_LinearTension_IsNull,None,Handle_FEmTool_LinearTension)
Handle_FEmTool_LinearTension.GetObject = new_instancemethod(_FEmTool.Handle_FEmTool_LinearTension_GetObject,None,Handle_FEmTool_LinearTension)
Handle_FEmTool_LinearTension._kill_pointed = new_instancemethod(_FEmTool.Handle_FEmTool_LinearTension__kill_pointed,None,Handle_FEmTool_LinearTension)
Handle_FEmTool_LinearTension_swigregister = _FEmTool.Handle_FEmTool_LinearTension_swigregister
Handle_FEmTool_LinearTension_swigregister(Handle_FEmTool_LinearTension)

def Handle_FEmTool_LinearTension_DownCast(*args):
  return _FEmTool.Handle_FEmTool_LinearTension_DownCast(*args)
Handle_FEmTool_LinearTension_DownCast = _FEmTool.Handle_FEmTool_LinearTension_DownCast

class FEmTool_ProfileMatrix(FEmTool_SparseMatrix):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param FirstIndexes:
        :type FirstIndexes: TColStd_Array1OfInteger &
        :rtype: None

        """
        _FEmTool.FEmTool_ProfileMatrix_swiginit(self,_FEmTool.new_FEmTool_ProfileMatrix(*args))
    def Solve(self, *args):
        """
        * Direct Solve of AX = B

        :param B:
        :type B: math_Vector &
        :param X:
        :type X: math_Vector &
        :rtype: None

        * Iterative solve of AX = B

        :param B:
        :type B: math_Vector &
        :param Init:
        :type Init: math_Vector &
        :param X:
        :type X: math_Vector &
        :param Residual:
        :type Residual: math_Vector &
        :param Tolerance: default value is 1.0e-8
        :type Tolerance: float
        :param NbIterations: default value is 50
        :type NbIterations: Standard_Integer
        :rtype: None

        * Iterative solve of AX = B

        :param B:
        :type B: math_Vector &
        :param Init:
        :type Init: math_Vector &
        :param X:
        :type X: math_Vector &
        :param Residual:
        :type Residual: math_Vector &
        :param Tolerance: default value is 1.0e-8
        :type Tolerance: float
        :param NbIterations: default value is 50
        :type NbIterations: Standard_Integer
        :rtype: None

        * Iterative solve of AX = B

        :param B:
        :type B: math_Vector &
        :param Init:
        :type Init: math_Vector &
        :param X:
        :type X: math_Vector &
        :param Residual:
        :type Residual: math_Vector &
        :param Tolerance: default value is 1.0e-8
        :type Tolerance: float
        :param NbIterations: default value is 50
        :type NbIterations: Standard_Integer
        :rtype: None

        """
        return _FEmTool.FEmTool_ProfileMatrix_Solve(self, *args)

    def IsInProfile(self, *args):
        """
        :param i:
        :type i: Standard_Integer
        :param j:
        :type j: Standard_Integer
        :rtype: bool

        """
        return _FEmTool.FEmTool_ProfileMatrix_IsInProfile(self, *args)

    def OutM(self):
        """
        :rtype: None

        """
        return _FEmTool.FEmTool_ProfileMatrix_OutM(self)

    def OutS(self):
        """
        :rtype: None

        """
        return _FEmTool.FEmTool_ProfileMatrix_OutS(self)

    def _kill_pointed(self):
        """_kill_pointed(FEmTool_ProfileMatrix self)"""
        return _FEmTool.FEmTool_ProfileMatrix__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(FEmTool_ProfileMatrix self) -> Handle_FEmTool_ProfileMatrix"""
        return _FEmTool.FEmTool_ProfileMatrix_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


FEmTool_ProfileMatrix.Solve = new_instancemethod(_FEmTool.FEmTool_ProfileMatrix_Solve,None,FEmTool_ProfileMatrix)
FEmTool_ProfileMatrix.IsInProfile = new_instancemethod(_FEmTool.FEmTool_ProfileMatrix_IsInProfile,None,FEmTool_ProfileMatrix)
FEmTool_ProfileMatrix.OutM = new_instancemethod(_FEmTool.FEmTool_ProfileMatrix_OutM,None,FEmTool_ProfileMatrix)
FEmTool_ProfileMatrix.OutS = new_instancemethod(_FEmTool.FEmTool_ProfileMatrix_OutS,None,FEmTool_ProfileMatrix)
FEmTool_ProfileMatrix._kill_pointed = new_instancemethod(_FEmTool.FEmTool_ProfileMatrix__kill_pointed,None,FEmTool_ProfileMatrix)
FEmTool_ProfileMatrix.GetHandle = new_instancemethod(_FEmTool.FEmTool_ProfileMatrix_GetHandle,None,FEmTool_ProfileMatrix)
FEmTool_ProfileMatrix_swigregister = _FEmTool.FEmTool_ProfileMatrix_swigregister
FEmTool_ProfileMatrix_swigregister(FEmTool_ProfileMatrix)

class Handle_FEmTool_ProfileMatrix(Handle_FEmTool_SparseMatrix):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _FEmTool.Handle_FEmTool_ProfileMatrix_swiginit(self,_FEmTool.new_Handle_FEmTool_ProfileMatrix(*args))
    DownCast = staticmethod(_FEmTool.Handle_FEmTool_ProfileMatrix_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_FEmTool_ProfileMatrix.Nullify = new_instancemethod(_FEmTool.Handle_FEmTool_ProfileMatrix_Nullify,None,Handle_FEmTool_ProfileMatrix)
Handle_FEmTool_ProfileMatrix.IsNull = new_instancemethod(_FEmTool.Handle_FEmTool_ProfileMatrix_IsNull,None,Handle_FEmTool_ProfileMatrix)
Handle_FEmTool_ProfileMatrix.GetObject = new_instancemethod(_FEmTool.Handle_FEmTool_ProfileMatrix_GetObject,None,Handle_FEmTool_ProfileMatrix)
Handle_FEmTool_ProfileMatrix._kill_pointed = new_instancemethod(_FEmTool.Handle_FEmTool_ProfileMatrix__kill_pointed,None,Handle_FEmTool_ProfileMatrix)
Handle_FEmTool_ProfileMatrix_swigregister = _FEmTool.Handle_FEmTool_ProfileMatrix_swigregister
Handle_FEmTool_ProfileMatrix_swigregister(Handle_FEmTool_ProfileMatrix)

def Handle_FEmTool_ProfileMatrix_DownCast(*args):
  return _FEmTool.Handle_FEmTool_ProfileMatrix_DownCast(*args)
Handle_FEmTool_ProfileMatrix_DownCast = _FEmTool.Handle_FEmTool_ProfileMatrix_DownCast



