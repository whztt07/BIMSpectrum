# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _LProp.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_LProp', [dirname(__file__)])
        except ImportError:
            import _LProp
            return _LProp
        if fp is not None:
            try:
                _mod = imp.load_module('_LProp', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _LProp = swig_import_helper()
    del swig_import_helper
else:
    import _LProp
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LProp.delete_SwigPyIterator
    def __iter__(self): return self
SwigPyIterator.value = new_instancemethod(_LProp.SwigPyIterator_value,None,SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_LProp.SwigPyIterator_incr,None,SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_LProp.SwigPyIterator_decr,None,SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_LProp.SwigPyIterator_distance,None,SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_LProp.SwigPyIterator_equal,None,SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_LProp.SwigPyIterator_copy,None,SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_LProp.SwigPyIterator_next,None,SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_LProp.SwigPyIterator___next__,None,SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_LProp.SwigPyIterator_previous,None,SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_LProp.SwigPyIterator_advance,None,SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_LProp.SwigPyIterator___eq__,None,SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_LProp.SwigPyIterator___ne__,None,SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_LProp.SwigPyIterator___iadd__,None,SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_LProp.SwigPyIterator___isub__,None,SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_LProp.SwigPyIterator___add__,None,SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_LProp.SwigPyIterator___sub__,None,SwigPyIterator)
SwigPyIterator_swigregister = _LProp.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import OCC.GeomAbs
import OCC.Standard
import OCC.TCollection
import OCC.MMgt
LProp_Inflection = _LProp.LProp_Inflection
LProp_MinCur = _LProp.LProp_MinCur
LProp_MaxCur = _LProp.LProp_MaxCur
LProp_Undecided = _LProp.LProp_Undecided
LProp_Undefined = _LProp.LProp_Undefined
LProp_Defined = _LProp.LProp_Defined
LProp_Computed = _LProp.LProp_Computed
class LProp_AnalyticCurInf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """
        :rtype: None

        """
        _LProp.LProp_AnalyticCurInf_swiginit(self,_LProp.new_LProp_AnalyticCurInf())
    def Perform(self, *args):
        """
        :param T:
        :type T: GeomAbs_CurveType
        :param UFirst:
        :type UFirst: float
        :param ULast:
        :type ULast: float
        :param Result:
        :type Result: LProp_CurAndInf &
        :rtype: None

        """
        return _LProp.LProp_AnalyticCurInf_Perform(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LProp_AnalyticCurInf.Perform = new_instancemethod(_LProp.LProp_AnalyticCurInf_Perform,None,LProp_AnalyticCurInf)
LProp_AnalyticCurInf._kill_pointed = new_instancemethod(_LProp.LProp_AnalyticCurInf__kill_pointed,None,LProp_AnalyticCurInf)
LProp_AnalyticCurInf_swigregister = _LProp.LProp_AnalyticCurInf_swigregister
LProp_AnalyticCurInf_swigregister(LProp_AnalyticCurInf)

class LProp_CurAndInf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """
        :rtype: None

        """
        _LProp.LProp_CurAndInf_swiginit(self,_LProp.new_LProp_CurAndInf())
    def AddInflection(self, *args):
        """
        :param Param:
        :type Param: float
        :rtype: None

        """
        return _LProp.LProp_CurAndInf_AddInflection(self, *args)

    def AddExtCur(self, *args):
        """
        :param Param:
        :type Param: float
        :param IsMin:
        :type IsMin: bool
        :rtype: None

        """
        return _LProp.LProp_CurAndInf_AddExtCur(self, *args)

    def Clear(self):
        """
        :rtype: None

        """
        return _LProp.LProp_CurAndInf_Clear(self)

    def IsEmpty(self):
        """
        :rtype: bool

        """
        return _LProp.LProp_CurAndInf_IsEmpty(self)

    def NbPoints(self):
        """
        * Returns the number of points. The Points are stored to increasing parameter.

        :rtype: int

        """
        return _LProp.LProp_CurAndInf_NbPoints(self)

    def Parameter(self, *args):
        """
        * Returns the parameter of the Nth point. raises if N not in the range [1,NbPoints()]

        :param N:
        :type N: Standard_Integer
        :rtype: float

        """
        return _LProp.LProp_CurAndInf_Parameter(self, *args)

    def Type(self, *args):
        """
        * Returns - MinCur if the Nth parameter corresponds to a minimum of the radius of curvature. - MaxCur if the Nth parameter corresponds to a maximum of the radius of curvature. - Inflection if the parameter corresponds to a point of inflection. raises if N not in the range [1,NbPoints()]

        :param N:
        :type N: Standard_Integer
        :rtype: LProp_CIType

        """
        return _LProp.LProp_CurAndInf_Type(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LProp_CurAndInf.AddInflection = new_instancemethod(_LProp.LProp_CurAndInf_AddInflection,None,LProp_CurAndInf)
LProp_CurAndInf.AddExtCur = new_instancemethod(_LProp.LProp_CurAndInf_AddExtCur,None,LProp_CurAndInf)
LProp_CurAndInf.Clear = new_instancemethod(_LProp.LProp_CurAndInf_Clear,None,LProp_CurAndInf)
LProp_CurAndInf.IsEmpty = new_instancemethod(_LProp.LProp_CurAndInf_IsEmpty,None,LProp_CurAndInf)
LProp_CurAndInf.NbPoints = new_instancemethod(_LProp.LProp_CurAndInf_NbPoints,None,LProp_CurAndInf)
LProp_CurAndInf.Parameter = new_instancemethod(_LProp.LProp_CurAndInf_Parameter,None,LProp_CurAndInf)
LProp_CurAndInf.Type = new_instancemethod(_LProp.LProp_CurAndInf_Type,None,LProp_CurAndInf)
LProp_CurAndInf._kill_pointed = new_instancemethod(_LProp.LProp_CurAndInf__kill_pointed,None,LProp_CurAndInf)
LProp_CurAndInf_swigregister = _LProp.LProp_CurAndInf_swigregister
LProp_CurAndInf_swigregister(LProp_CurAndInf)

class LProp_SequenceNodeOfSequenceOfCIType(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        :param I:
        :type I: LProp_CIType &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _LProp.LProp_SequenceNodeOfSequenceOfCIType_swiginit(self,_LProp.new_LProp_SequenceNodeOfSequenceOfCIType(*args))
    def Value(self):
        """
        :rtype: LProp_CIType

        """
        return _LProp.LProp_SequenceNodeOfSequenceOfCIType_Value(self)

    def _kill_pointed(self):
        """_kill_pointed(LProp_SequenceNodeOfSequenceOfCIType self)"""
        return _LProp.LProp_SequenceNodeOfSequenceOfCIType__kill_pointed(self)

    def GetHandle(self):
        """GetHandle(LProp_SequenceNodeOfSequenceOfCIType self) -> Handle_LProp_SequenceNodeOfSequenceOfCIType"""
        return _LProp.LProp_SequenceNodeOfSequenceOfCIType_GetHandle(self)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LProp_SequenceNodeOfSequenceOfCIType.Value = new_instancemethod(_LProp.LProp_SequenceNodeOfSequenceOfCIType_Value,None,LProp_SequenceNodeOfSequenceOfCIType)
LProp_SequenceNodeOfSequenceOfCIType._kill_pointed = new_instancemethod(_LProp.LProp_SequenceNodeOfSequenceOfCIType__kill_pointed,None,LProp_SequenceNodeOfSequenceOfCIType)
LProp_SequenceNodeOfSequenceOfCIType.GetHandle = new_instancemethod(_LProp.LProp_SequenceNodeOfSequenceOfCIType_GetHandle,None,LProp_SequenceNodeOfSequenceOfCIType)
LProp_SequenceNodeOfSequenceOfCIType_swigregister = _LProp.LProp_SequenceNodeOfSequenceOfCIType_swigregister
LProp_SequenceNodeOfSequenceOfCIType_swigregister(LProp_SequenceNodeOfSequenceOfCIType)

class Handle_LProp_SequenceNodeOfSequenceOfCIType(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _LProp.Handle_LProp_SequenceNodeOfSequenceOfCIType_swiginit(self,_LProp.new_Handle_LProp_SequenceNodeOfSequenceOfCIType(*args))
    DownCast = staticmethod(_LProp.Handle_LProp_SequenceNodeOfSequenceOfCIType_DownCast)
    def __del__(self):
        try:
            self.thisown = False
            GarbageCollector.garbage.collect_object(self)
        except:
            pass


Handle_LProp_SequenceNodeOfSequenceOfCIType.Nullify = new_instancemethod(_LProp.Handle_LProp_SequenceNodeOfSequenceOfCIType_Nullify,None,Handle_LProp_SequenceNodeOfSequenceOfCIType)
Handle_LProp_SequenceNodeOfSequenceOfCIType.IsNull = new_instancemethod(_LProp.Handle_LProp_SequenceNodeOfSequenceOfCIType_IsNull,None,Handle_LProp_SequenceNodeOfSequenceOfCIType)
Handle_LProp_SequenceNodeOfSequenceOfCIType.GetObject = new_instancemethod(_LProp.Handle_LProp_SequenceNodeOfSequenceOfCIType_GetObject,None,Handle_LProp_SequenceNodeOfSequenceOfCIType)
Handle_LProp_SequenceNodeOfSequenceOfCIType._kill_pointed = new_instancemethod(_LProp.Handle_LProp_SequenceNodeOfSequenceOfCIType__kill_pointed,None,Handle_LProp_SequenceNodeOfSequenceOfCIType)
Handle_LProp_SequenceNodeOfSequenceOfCIType_swigregister = _LProp.Handle_LProp_SequenceNodeOfSequenceOfCIType_swigregister
Handle_LProp_SequenceNodeOfSequenceOfCIType_swigregister(Handle_LProp_SequenceNodeOfSequenceOfCIType)

def Handle_LProp_SequenceNodeOfSequenceOfCIType_DownCast(*args):
  return _LProp.Handle_LProp_SequenceNodeOfSequenceOfCIType_DownCast(*args)
Handle_LProp_SequenceNodeOfSequenceOfCIType_DownCast = _LProp.Handle_LProp_SequenceNodeOfSequenceOfCIType_DownCast

class LProp_SequenceOfCIType(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """
        :rtype: None

        """
        _LProp.LProp_SequenceOfCIType_swiginit(self,_LProp.new_LProp_SequenceOfCIType())
    def Clear(self):
        """
        :rtype: None

        """
        return _LProp.LProp_SequenceOfCIType_Clear(self)

    def Assign(self, *args):
        """
        :param Other:
        :type Other: LProp_SequenceOfCIType &
        :rtype: LProp_SequenceOfCIType

        """
        return _LProp.LProp_SequenceOfCIType_Assign(self, *args)

    def Set(self, *args):
        """
        :param Other:
        :type Other: LProp_SequenceOfCIType &
        :rtype: LProp_SequenceOfCIType

        """
        return _LProp.LProp_SequenceOfCIType_Set(self, *args)

    def Append(self, *args):
        """
        :param T:
        :type T: LProp_CIType &
        :rtype: None

        :param S:
        :type S: LProp_SequenceOfCIType &
        :rtype: None

        """
        return _LProp.LProp_SequenceOfCIType_Append(self, *args)

    def Prepend(self, *args):
        """
        :param T:
        :type T: LProp_CIType &
        :rtype: None

        :param S:
        :type S: LProp_SequenceOfCIType &
        :rtype: None

        """
        return _LProp.LProp_SequenceOfCIType_Prepend(self, *args)

    def InsertBefore(self, *args):
        """
        :param Index:
        :type Index: Standard_Integer
        :param T:
        :type T: LProp_CIType &
        :rtype: None

        :param Index:
        :type Index: Standard_Integer
        :param S:
        :type S: LProp_SequenceOfCIType &
        :rtype: None

        """
        return _LProp.LProp_SequenceOfCIType_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        """
        :param Index:
        :type Index: Standard_Integer
        :param T:
        :type T: LProp_CIType &
        :rtype: None

        :param Index:
        :type Index: Standard_Integer
        :param S:
        :type S: LProp_SequenceOfCIType &
        :rtype: None

        """
        return _LProp.LProp_SequenceOfCIType_InsertAfter(self, *args)

    def First(self):
        """
        :rtype: LProp_CIType

        """
        return _LProp.LProp_SequenceOfCIType_First(self)

    def Last(self):
        """
        :rtype: LProp_CIType

        """
        return _LProp.LProp_SequenceOfCIType_Last(self)

    def Split(self, *args):
        """
        :param Index:
        :type Index: Standard_Integer
        :param Sub:
        :type Sub: LProp_SequenceOfCIType &
        :rtype: None

        """
        return _LProp.LProp_SequenceOfCIType_Split(self, *args)

    def Value(self, *args):
        """
        :param Index:
        :type Index: Standard_Integer
        :rtype: LProp_CIType

        """
        return _LProp.LProp_SequenceOfCIType_Value(self, *args)

    def SetValue(self, *args):
        """
        :param Index:
        :type Index: Standard_Integer
        :param I:
        :type I: LProp_CIType &
        :rtype: None

        """
        return _LProp.LProp_SequenceOfCIType_SetValue(self, *args)

    def ChangeValue(self, *args):
        """
        :param Index:
        :type Index: Standard_Integer
        :rtype: LProp_CIType

        """
        return _LProp.LProp_SequenceOfCIType_ChangeValue(self, *args)

    def Remove(self, *args):
        """
        :param Index:
        :type Index: Standard_Integer
        :rtype: None

        :param FromIndex:
        :type FromIndex: Standard_Integer
        :param ToIndex:
        :type ToIndex: Standard_Integer
        :rtype: None

        """
        return _LProp.LProp_SequenceOfCIType_Remove(self, *args)

    def __del__(self):
    	try:
    		self.thisown = False
    		GarbageCollector.garbage.collect_object(self)
    	except:
    		pass


LProp_SequenceOfCIType.Clear = new_instancemethod(_LProp.LProp_SequenceOfCIType_Clear,None,LProp_SequenceOfCIType)
LProp_SequenceOfCIType.Assign = new_instancemethod(_LProp.LProp_SequenceOfCIType_Assign,None,LProp_SequenceOfCIType)
LProp_SequenceOfCIType.Set = new_instancemethod(_LProp.LProp_SequenceOfCIType_Set,None,LProp_SequenceOfCIType)
LProp_SequenceOfCIType.Append = new_instancemethod(_LProp.LProp_SequenceOfCIType_Append,None,LProp_SequenceOfCIType)
LProp_SequenceOfCIType.Prepend = new_instancemethod(_LProp.LProp_SequenceOfCIType_Prepend,None,LProp_SequenceOfCIType)
LProp_SequenceOfCIType.InsertBefore = new_instancemethod(_LProp.LProp_SequenceOfCIType_InsertBefore,None,LProp_SequenceOfCIType)
LProp_SequenceOfCIType.InsertAfter = new_instancemethod(_LProp.LProp_SequenceOfCIType_InsertAfter,None,LProp_SequenceOfCIType)
LProp_SequenceOfCIType.First = new_instancemethod(_LProp.LProp_SequenceOfCIType_First,None,LProp_SequenceOfCIType)
LProp_SequenceOfCIType.Last = new_instancemethod(_LProp.LProp_SequenceOfCIType_Last,None,LProp_SequenceOfCIType)
LProp_SequenceOfCIType.Split = new_instancemethod(_LProp.LProp_SequenceOfCIType_Split,None,LProp_SequenceOfCIType)
LProp_SequenceOfCIType.Value = new_instancemethod(_LProp.LProp_SequenceOfCIType_Value,None,LProp_SequenceOfCIType)
LProp_SequenceOfCIType.SetValue = new_instancemethod(_LProp.LProp_SequenceOfCIType_SetValue,None,LProp_SequenceOfCIType)
LProp_SequenceOfCIType.ChangeValue = new_instancemethod(_LProp.LProp_SequenceOfCIType_ChangeValue,None,LProp_SequenceOfCIType)
LProp_SequenceOfCIType.Remove = new_instancemethod(_LProp.LProp_SequenceOfCIType_Remove,None,LProp_SequenceOfCIType)
LProp_SequenceOfCIType._kill_pointed = new_instancemethod(_LProp.LProp_SequenceOfCIType__kill_pointed,None,LProp_SequenceOfCIType)
LProp_SequenceOfCIType_swigregister = _LProp.LProp_SequenceOfCIType_swigregister
LProp_SequenceOfCIType_swigregister(LProp_SequenceOfCIType)



